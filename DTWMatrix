#############################################################################################
# Calculate Dynamic Time Warping (DTW) for a set of vectors with possibly differing lengths #
#############################################################################################
# Make sure that the R packge 'dtw' is installed
# The input is a list of N vectors with possibly differing lengths (i.e. LIST1 <- list(v1, v2, ..., vN))
# The output is the matrix of all pairwise DTW measurements

DTWMatrix <- function(LIST1) {
	require(dtw) # Load the dtw package
	LIST2 <- list() # Define a list to hold the measurements

	# Calculates dtw measurements for all possible pairs of vectors	
	for (n in 1:length(LIST1)) {LIST2[[n]] <- mapply(function(x,y) dtw(x,y)$normalizedDistance, LIST1[n], LIST1[seq(1:n)])}													          

	# Convert the list into a matrix									   
	M1 <- matrix(0, length(LIST2), length(LIST2)) # Define a matrix to hold the results 
	for (n in 1:length(LIST2)) {		      # Convert the list into a matrix, this gives an upper right-triangular
		X1 <- LIST2[[n]]									        	   
		C1 <- rep(0, length(LIST2)-length(X1)) # Define appropriate length vectors at each iteration						          
		M1[,n] <- c(X1, C1)}                   # Save result for current n
													          
	M1 <- M1+t(M1) # The code only calculates the upper right triangular so we add it to its transpose to get the complete matrix										   
	return(M1)							          
	}
